@page "/"

@inject RaytrakkaBridge RaytrakkaBridgeService
@inject RaytrakkaListener RaytrakkaListener
@inject IdToScene IdToScene
@inject SceneIds SceneIds
@using RaytrAkkar.Common
@using System.Drawing;
@using Akka.Actor;
@using System.IO;
@using System.Linq;
@using System.Collections.Concurrent;

<div class="flex-container">
    <div>
        <h1>RaytrAkka</h1>
        <ComboBox Data="@scenesRendered" SelectedItem="@currentScene" Callback="@ComboBoxSet" />
    </div>
    <div>
        <Image Value="@imageString" />
    </div>
    <div>
        <div>
            <textarea id="scene-lisp" name="scene-lisp" rows="4" cols="93" @bind="lispScene">
        </textarea>
        </div>
        <div>
            <button class="btn btn-primary" @onclick="Render">Render</button>
        </div>
    </div>
</div>


@code {

    public int width = 768;
    public int height = 480;

    public string lispScene { get; set; } = "(none 0 0)";

    public List<string> scenesRendered => SceneIds.Collection.ToList();
    public string currentScene;


    public static string ImgToString(Bitmap img)
    {
        return String.Format("data:image/png;base64,{0}", Convert.ToBase64String(BitmapToBytes(img)));
    }


    public string imageString = ImgToString(new Bitmap(768, 480));

    private static byte[] BitmapToBytes(Bitmap bitmap)
    {
        using (var stream = new MemoryStream())
        {
            bitmap.Save(stream, System.Drawing.Imaging.ImageFormat.Png);
            return stream.ToArray();
        }
    }

    private int currentCount = 0;
    private ConcurrentDictionary<string, Bitmap> _sceneIdToImg => IdToScene.Collection;

    private void Render()
    {
        var guid = Guid.NewGuid();
        var scene = new Scene(guid.ToString("D"), width, height);
        scene.Src = lispScene;
        RaytrakkaListener.actorRef.Tell(new RenderScene(scene));
        var isNew = AddToCombBox($"{scene.SceneId}");
        if (isNew)
        {
            var img = new Bitmap(scene.Width, scene.Height);
            _sceneIdToImg[scene.SceneId] = img;
            UpdateImage(img);
        }
    }

    public void ReactToSceneAdded(object sender, RenderScene scene)
    {
        Console.WriteLine("SceneAdded called");
        var isNew = AddToCombBox($"{scene.Scene.SceneId}");
        if (isNew)
        {
            var img = new Bitmap(scene.Scene.Width, scene.Scene.Height);
            _sceneIdToImg[scene.Scene.SceneId] = img;
            UpdateImage(img);
        }
    }

    public bool AddToCombBox(string msg)
    {
        if (SceneIds.Collection.Contains(msg))
        {
            base.InvokeAsync(StateHasChanged);
            return false;
        }
        SceneIds.Collection.Add(msg);
        currentScene = msg;
        base.InvokeAsync(StateHasChanged);
        return true;
    }

    public void ComboBoxSet(string msg)
    {
        var img = _sceneIdToImg[msg];
        currentScene = msg;
        UpdateImage(img);
    }

    public void UpdateImage(Bitmap img)
    {

        imageString = ImgToString(img);
        base.InvokeAsync(StateHasChanged);
    }

    public void ReactToTileRendered(object sender, RenderedTile tile)
    {
        Console.WriteLine("ReactToTileRendered called");
        var img = tile.ToBitmap(_sceneIdToImg[tile.Tile.Scene.SceneId]);
        _sceneIdToImg[tile.Tile.Scene.SceneId] = img;
        currentScene = tile.Tile.Scene.SceneId;
        UpdateImage(img);
    }

    public void ReactoToSceneRendered(object sender, RenderedScene scene)
    {
        Console.WriteLine("ReactoToSceneRendered called");
        var img = scene.ToBitmap(_sceneIdToImg[scene.Scene.SceneId]);
        _sceneIdToImg[scene.Scene.SceneId] = img;
        currentScene = scene.Scene.SceneId;
        UpdateImage(img);
    }

    protected override async Task OnInitializedAsync()
    {
        currentScene = SceneIds.Collection.FirstOrDefault();
        if (!(currentScene is null))
        {
            UpdateImage(_sceneIdToImg[currentScene]);
        }
        RaytrakkaBridgeService.AddedScene += ReactToSceneAdded;
        RaytrakkaBridgeService.RenderedScene += ReactoToSceneRendered;
        RaytrakkaBridgeService.RenderedTile += ReactToTileRendered;
    }
}
